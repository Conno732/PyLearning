#version 330 core

in vec2 fragmentTexCoord;
in vec3 Normals;
in vec3 FragPos;


uniform sampler2D imageTexture;
uniform vec4 objColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec4 color;

void main()
{   
    float ambientStrength = 0.1;
    float specularStrength = 0.5;

    vec3 norm = normalize(Normals);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, Normals);  
    
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
    vec3 ambient = ambientStrength * lightColor;
    vec4 stuff = texture(imageTexture, fragmentTexCoord);
    vec3 result = (ambient + diffuse + specular) * (objColor + stuff).xyz;
    color = vec4(result, 1);
}
